{"version":3,"sources":["img/SWAPI.png","context/StarWarsContext.js","functions/filterfunction.js","components/tableContent.js","components/table.js","components/title.js","components/filters.js","components/filterButton.js","components/filtersComponent.js","components/listFilters.js","components/inputs.js","services/SWAPI.js","context/StarWarsProvider.js","App.js","index.js"],"names":["module","exports","StarWarsContext","createContext","filterFunction","data","filters","planetsByName","cpFilters","splice","length","planets","forEach","numericValues","column","comparison","value","filter","pla","parseFloat","filterPlanetByColumn","name","planet","toLowerCase","includes","filterPlanetByName","Table","useContext","useEffect","headerTable","Object","keys","map","header","key","Math","random","chave","fetchPlanets","isLoading","className","data-testid","type","color","height","Title","src","starWarsLogo","alt","setFilteredSelector","e","part","setActualFilter","target","prevState","Filters","selectors","actualFilter","onChange","col","valueComp","FilterButton","addFilter","onClick","FiltersComponent","console","log","renderFiltersActive","setSelectors","setFilters","filtro","index","id","prevSelector","elem","parseInt","deleteFilter","ListFilters","Inputs","placeholder","word","prevFilter","newFilter","getPlanets","fetch","then","response","json","ok","Promise","resolve","reject","StarWarsProvider","children","useState","setData","setIsLoading","initialActualFilter","context","swAPI","results","fetchPlanetsComplete","prevSelectors","prevfilters","addNewFilter","alert","Provider","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.82c99a59.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/SWAPI.17105726.png\";","import { createContext } from 'react';\n\nconst StarWarsContext = createContext();\n\nexport default StarWarsContext;\n","\nconst filterPlanetByName = (data, filters) => {\n  const { name } = filters[0];\n  return name\n    ? data.filter((planet) => planet.name.toLowerCase().includes(name.toLowerCase())) : data;\n};\n\nconst filterPlanetByColumn = (planetsByName, filters) => {\n  const cpFilters = [...filters];\n  cpFilters.splice(0, 1);\n  if (!cpFilters.length) return planetsByName;\n  let planets = planetsByName;\n  cpFilters.forEach(({ numericValues: { column, comparison, value } }) => {\n    if (column !== 'coluna' && comparison === 'Maior que' && value >= 0) {\n      planets = planets.filter((pla) => (parseFloat(pla[column]) > parseFloat(value)));\n    } else if (column !== 'coluna' && comparison === 'Menor que' && value >= 0) {\n      planets = planets.filter((pla) => (parseFloat(pla[column]) < parseFloat(value)));\n    } else if (column !== 'coluna' && comparison === 'ou Igual a' && value >= 0) {\n      planets = planets.filter((pla) => (parseFloat(pla[column]) === parseFloat(value)));\n    }\n  });\n  return planets;\n};\n\nconst filterFunction = (data, filters) => {\n  const planetsByName = filterPlanetByName(data, filters);\n  const filteredPlanets = filterPlanetByColumn(planetsByName, filters);\n  return filteredPlanets;\n};\n\nexport default filterFunction;\n","import React, { useContext, useEffect } from 'react';\nimport StarWarsContext from '../context/StarWarsContext';\nimport filterFunction from '../functions/filterfunction';\nimport '../styles/tableContent.css';\n\nfunction Table() {\n  const { data, filters } = useContext(StarWarsContext);\n\n  useEffect(() => {\n  }, [filters]);\n\n  const headerTable = Object.keys(data[0]);\n  const planets = filterFunction(data, filters);\n  return (\n    <table>\n      <thead>\n        <tr>\n          {headerTable.map((header) => (\n            header !== 'residents' ? <th key={header}>{header}</th> : null\n          ))}\n        </tr>\n      </thead>\n      <tbody>\n        {planets.map((planet) => (\n          <tr key={`${planet} ${Math.random()}`}>\n            {Object.keys(planet).map((chave) => (\n              chave !== 'residents' ? <td key={planet[chave]}>{planet[chave]}</td> : null\n            ))}\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n\nexport default Table;\n","import React, { useContext, useEffect } from 'react';\nimport ReactLoading from 'react-loading';\nimport StarWarsContext from '../context/StarWarsContext';\nimport TableContent from './tableContent';\nimport '../styles/table.css';\n\nfunction Table() {\n  const {\n    fetchPlanets, data, isLoading,\n  } = useContext(StarWarsContext);\n\n  useEffect(() => {\n    fetchPlanets();\n  }, []);\n\n  return (\n    <div className=\"table-container\">\n      {isLoading && (\n        <div data-testid=\"loading\" className=\"loading-container\">\n          <ReactLoading type=\"spin\" color=\"yellow\" height={150} />\n        </div>\n      )}\n      {!isLoading && <TableContent data={data} />}\n    </div>\n  );\n}\n\nexport default Table;\n","import React from 'react';\nimport starWarsLogo from '../img/SWAPI.png';\n\nfunction Title() {\n  return <img src={starWarsLogo} className=\"title-SWAPI\" alt=\"SWAPI\" />;\n}\n\nexport default Title;\n","import React, { useContext } from 'react';\nimport StarWarsContext from '../context/StarWarsContext';\nimport '../styles/filters.css';\n\nconst setFilteredSelector = (e, part, setActualFilter) => {\n  const { value } = e.target;\n  setActualFilter((prevState) => ({\n    ...prevState,\n    [part]: value,\n  }));\n};\n\nfunction Filters() {\n  const { selectors, actualFilter, setActualFilter } = useContext(StarWarsContext);\n  const comparisonvalues = ['-', 'Maior que', 'Menor que', 'ou Igual a'];\n  const { column, comparison, value } = actualFilter;\n  return (\n    <div className=\"filters-container\">\n      <div className=\"filters-title\">Escolha o filtro: </div>\n      <select data-testid=\"col\" className=\"select-filter\" value={column} onChange={(e) => setFilteredSelector(e, 'column', setActualFilter)}>\n        {selectors.map((col) => (<option key={col} value={col}>{col}</option>))}\n      </select>\n      <select data-testid=\"comp\" className=\"select-filter\" value={comparison} onChange={(e) => setFilteredSelector(e, 'comparison', setActualFilter)}>\n        {comparisonvalues.map((valueComp) => (<option key={valueComp}>{valueComp}</option>))}\n      </select>\n      <input\n        data-testid=\"value-comp\"\n        className=\"input-filter\"\n        type=\"number\"\n        onChange={(e) => setFilteredSelector(e, 'value', setActualFilter)}\n        value={value}\n      />\n    </div>\n  );\n}\n\nexport default Filters;\n","import React, { useContext } from 'react';\nimport StarWarsContext from '../context/StarWarsContext';\nimport '../styles/filterButton.css';\n\nfunction FilterButton() {\n  const { addFilter } = useContext(StarWarsContext);\n  return (\n    <div>\n      <button\n        type=\"button\"\n        onClick={() => addFilter()}\n        className=\"filter-btn\"\n        data-testid=\"btn-filter\"\n      >\n        Filtrar\n      </button>\n    </div>\n  );\n}\n\nexport default FilterButton;\n","import React, { useContext } from 'react';\nimport StarWarsContext from '../context/StarWarsContext';\nimport Filters from './filters';\nimport FilterButton from './filterButton';\n\nconst FiltersComponent = () => {\n  const { selectors } = useContext(StarWarsContext);\n  console.log(selectors.length);\n  return (\n    <div>\n      {selectors.length !== 1 && <Filters />}\n      {selectors.length !== 1 && <FilterButton />}\n    </div>\n  );\n};\n\nexport default FiltersComponent;\n","import React, { useContext } from 'react';\nimport StarWarsContext from '../context/StarWarsContext';\nimport '../styles/listFilters.css';\n\nconst deleteFilter = (e, setSelectors, setFilters) => {\n  const { id, value } = e.target;\n  setSelectors((prevSelector) => [...prevSelector, value]);\n  setFilters((prevSelector) => ([\n    ...prevSelector.filter((elem, index) => index !== parseInt(id, 10)),\n  ]));\n};\n\nconst renderFiltersActive = (filters, setSelectors, setFilters) => {\n  const cpFilters = [...filters];\n  cpFilters.splice(0, 1);\n  return (\n    <div className=\"active-filters-container\">\n      {cpFilters.map((filtro, index) => (\n        <div key={filtro.numericValues.column} className=\"active-filters\">\n          <button\n            data-testid={`delete-${filtro.numericValues.column}`}\n            type=\"button\"\n            onClick={(e) => deleteFilter(e, setSelectors, setFilters)}\n            id={index + 1}\n            value={filtro.numericValues.column}\n          > X </button>\n          <div className=\"filter-description-container\">\n            <div className=\"filter-description\">\n              {filtro.numericValues.column}\n            </div>\n            <div className=\"filter-description\">\n              {filtro.numericValues.comparison}\n            </div>\n            <div className=\"filter-description\">\n              {filtro.numericValues.value}\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nfunction ListFilters() {\n  const { filters, setSelectors, setFilters } = useContext(StarWarsContext);\n  return (\n    <div>\n      {filters.length > 1 && renderFiltersActive(filters, setSelectors, setFilters)}\n    </div>\n  );\n}\n\nexport default ListFilters;\n","import React, { useContext } from 'react';\nimport StarWarsContext from '../context/StarWarsContext';\nimport '../styles/inputs.css';\n\nfunction Inputs() {\n  const { setFilters } = useContext(StarWarsContext);\n\n  const setFilteredWord = (word) => {\n    setFilters((prevFilter) => {\n      const newFilter = [...prevFilter];\n      newFilter[0] = { name: word };\n      console.log(newFilter);\n      return newFilter;\n    });\n  };\n\n  return (\n    <div className=\"input-container\">\n      <div className=\"input-title\">Pesquisar</div>\n      <input\n        data-testid=\"name-inp\"\n        className=\"input-name\"\n        placeholder=\"Procurar planeta\"\n        onChange={(e) => setFilteredWord(e.target.value)}\n      />\n    </div>\n  );\n}\n\nexport default Inputs;\n","const PLANETS_API = 'https://swapi-trybe.herokuapp.com/api';\n\nconst getPlanets = () => (\n  fetch(`${PLANETS_API}/planets`)\n    .then((response) => (\n      response\n        .json()\n        .then((json) => (response.ok ? Promise.resolve(json) : Promise.reject(json)))\n    ))\n);\n\nexport default getPlanets;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport swAPI from '../services/SWAPI';\nimport StarWarsContext from './StarWarsContext';\n\nconst StarWarsProvider = ({ children }) => {\n  const initialSelectors = ['coluna', 'population', 'orbital_period', 'diameter', 'rotation_period', 'surface_water'];\n  const [selectors, setSelectors] = useState(initialSelectors);\n  const [data, setData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const initialFilters = [{ name: '' }];\n  const initialActualFilter = {\n    column: 'coluna',\n    comparison: '-',\n    value: 0,\n  };\n\n  const [filters, setFilters] = useState(initialFilters);\n  const [actualFilter, setActualFilter] = useState(initialActualFilter);\n\n  const fetchPlanetsComplete = ({ results }) => {\n    setData(results);\n    setIsLoading(false);\n  };\n\n  const fetchPlanets = () => {\n    swAPI()\n      .then((response) => fetchPlanetsComplete(response));\n  };\n\n  const addNewFilter = (column, comparison, value) => {\n    setSelectors((prevSelectors) => [\n      ...prevSelectors.filter((elem) => elem !== column),\n    ]);\n    setFilters((prevfilters) => [...prevfilters, {\n      numericValues: {\n        column,\n        comparison,\n        value,\n      },\n    }]);\n    setActualFilter(initialActualFilter);\n  };\n\n  const addFilter = () => {\n    const { column, comparison, value } = actualFilter;\n    if ((column !== 'coluna' && comparison !== '-' && value >= 0)) {\n      addNewFilter(column, comparison, value);\n    } else alert('Escolha os três campos');\n  };\n\n  const context = {\n    selectors,\n    setSelectors,\n    data,\n    fetchPlanets,\n    isLoading,\n    filters,\n    setFilters,\n    actualFilter,\n    setActualFilter,\n    addFilter,\n  };\n\n  return (\n    <StarWarsContext.Provider value={context}>\n      {children}\n    </StarWarsContext.Provider>\n  );\n};\n\nexport default StarWarsProvider;\n\nStarWarsProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n","import React from 'react';\nimport Table from './components/table';\nimport Title from './components/title';\nimport FiltersComponent from './components/filtersComponent';\nimport ListFilters from './components/listFilters';\nimport Inputs from './components/inputs';\nimport Provider from './context/StarWarsProvider';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Provider>\n        <Title />\n        <Inputs />\n        <FiltersComponent />\n        <ListFilters />\n        <Table />\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}